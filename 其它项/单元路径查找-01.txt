#include<iostream>
using namespace std;
#include<string>
#include<map>
#include<vector>
#include<algorithm>
#include<functional>
class Number
{
public:
	int m_MyNum;//节点编号
	int m_SmallNum;//出发点到当前位置动态距离
	int m_LostNum;//上一个节点编号
	bool m_Judge;//是否已经是最优路线
	map<int, Number>m_NearClass;//节点编号 节点类
	map<int, int>m_NearDistance;//节点编号 节点距离
	Number()
	{
	}
	Number(int mynum)
	{
		this->m_MyNum = mynum;
		this->m_SmallNum = 30000;
		this->m_Judge = false;
		this->m_LostNum = -1;
	}
	void GetMap(Number number,int num)
	{
		m_NearClass.insert(make_pair(number.m_MyNum, number));
		m_NearDistance.insert(make_pair(number.m_MyNum,num));
	}
};

int main()
{
	//创建节点
	Number n0(0);Number n1(1);Number n2(2);Number n3(3);Number n4(4);Number n5(5);Number n6(6);Number n7(7);Number n8(8);
	//创建节点连接
	n0.GetMap(n1, 4);n0.GetMap(n7, 8);

	n1.GetMap(n0, 4);n1.GetMap(n7, 11);n1.GetMap(n2, 8);

	n2.GetMap(n1, 8);n2.GetMap(n8, 2);n2.GetMap(n5, 4);n2.GetMap(n3, 7);

	n3.GetMap(n2, 7);n3.GetMap(n5, 14);n3.GetMap(n4, 9);

	n4.GetMap(n3, 9);n4.GetMap(n5, 10);

	n5.GetMap(n6, 2);n5.GetMap(n2, 4);n5.GetMap(n3, 14);n5.GetMap(n4, 10);

	n6.GetMap(n7, 1);n6.GetMap(n8, 6);n6.GetMap(n5, 2);

	n7.GetMap(n0, 8);n7.GetMap(n1, 11);n7.GetMap(n8, 7);n7.GetMap(n6, 1);

	n8.GetMap(n2, 2);n8.GetMap(n7, 7);n8.GetMap(n6, 6);

	//初始位置值
	int StartNum = 0;
	//结束位置值
	int EndWhere = 4;
	//放入容器
	map<int, Number>AllMap;//节点编号 节点

	AllMap.insert(make_pair(n0.m_MyNum, n0));
	AllMap.insert(make_pair(n1.m_MyNum, n1));
	AllMap.insert(make_pair(n2.m_MyNum, n2));
	AllMap.insert(make_pair(n3.m_MyNum, n3));
	AllMap.insert(make_pair(n4.m_MyNum, n4));
	AllMap.insert(make_pair(n5.m_MyNum, n5));
	AllMap.insert(make_pair(n6.m_MyNum, n6));
	AllMap.insert(make_pair(n7.m_MyNum, n7));
	AllMap.insert(make_pair(n8.m_MyNum, n8));


	//以上为修改值
	//----------------------------------------------------------------------------------------------------------------

	Number tempNum = AllMap[StartNum];
	tempNum.m_Judge = true;
	tempNum.m_SmallNum = 0;
	AllMap[StartNum] = tempNum;


	vector<int>vFind;//记录临近且未被标记的节点
	int ThisNum = StartNum;
	while (true)
	{
		//从勘探值开始 按照到初始位置最短路线更新临近的且非被标记的节点距离
		//若成功更新距离 同时更新前面点

		//记录临近且未被标记的节点
		for (map<int, Number>::iterator it = AllMap[ThisNum].m_NearClass.begin(); it != AllMap[ThisNum].m_NearClass.end(); it++)
		{
			if (it->second.m_Judge == false)
			{
				//记录此节点
				vFind.push_back(it->first);
			}
		}
		//更新数据或不更新数据
		for (vector<int>::iterator it = vFind.begin(); it != vFind.end(); it++)
		{
			int num = AllMap[ThisNum].m_SmallNum + AllMap[ThisNum].m_NearDistance[*it];


			bool numNewOrOld = num < AllMap[*it].m_SmallNum;
			//若自身m_SmallNum加上两节点距离小于此节点m_SmallNum 更新
			if (numNewOrOld == true)
			{
				Number number = AllMap[*it];
				//更新 最短距离与上一个节点编号
				number.m_SmallNum = num;
				number.m_LostNum = ThisNum;
				//新值覆盖原来旧值
				AllMap[*it] = number;
			}			
			//若自身m_SmallNum加上两节点距离大于此节点m_SmallNum 不更新
			else
			{
				//无操作
			}
		}

		vFind.clear();
		//是否结束
		bool END = true;
		for (map<int, Number>::iterator it = AllMap.begin(); it != AllMap.end(); it++)
		{
			if (it->second.m_Judge == false)
			{
				END = false;
			}
		}
		if (END == true)
		{
			for (map<int, Number>::iterator it = AllMap.begin(); it != AllMap.end(); it++)
			{

				cout << "节点：" << it->second.m_MyNum << "  最短路线：" << it->second.m_SmallNum << "  上一节点：";
				switch (it->second.m_LostNum)
				{
				case -1:cout << "无" << endl; break;
				default:cout << it->second.m_LostNum << endl; break;
				}
			}

			cout <<"从 "<<StartNum<< " 出发  到达 " << EndWhere << " 的顺序是：";
			vector<int>v;
			bool BREAK = false;
			while (true)
			{
				for (map<int, Number>::iterator it = AllMap.begin(); it != AllMap.end(); it++)
				{
					if (EndWhere == StartNum)
					{
						BREAK = true;
						break;
					}
					if (it->first == EndWhere)
					{
						v.push_back(it->first);
						EndWhere = it->second.m_LostNum;

						break;
					}


				}
				if (BREAK == true)
				{
					break;
				}
			}


			v.push_back(StartNum);

			reverse(v.begin(), v.end());
			for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
			{
				cout << *it << " ";
			}
			cout << endl;
			v.clear();
			system("pause");
			return 0;
		}
		//挑选下一个位置标记
		int BetterNum = 30000;
		int BetterWhere;
		for (map<int, Number>::iterator it = AllMap.begin(); it != AllMap.end(); it++)
		{
			if (it->second.m_Judge == false && BetterNum > it->second.m_SmallNum)
			{
				BetterNum = it->second.m_SmallNum;
				BetterWhere = it->first;
			}
		}
		
		Number number = AllMap[BetterWhere];
		number.m_Judge = true;
		AllMap[BetterWhere] = number;
		ThisNum = BetterWhere;




	}
	system("pause");
	return 0;
}