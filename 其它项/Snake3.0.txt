#include<iostream>
using namespace std;
#include<string>
#include<ctime>
#include<conio.h>
#define Row 29  //行
#define List 47 //列
class Wall
{
public:
	//所在二维数组坐标的值
	int m_wall = -1;
	//墙的图形
	string m_Wall = "■";
};

class Snake
{
public:
	Snake()//三个初始位置
	{
		m_longArr[0][0] = m_x;
		m_longArr[0][1] = m_y;
		m_longArr[1][0] = m_x01;
		m_longArr[1][1] = m_y01;
		m_longArr[2][0] = m_x02;
		m_longArr[2][1] = m_y02;
	}
	//初始坐标
	int m_x = 5;//行
	int m_y = 5;//列
	//身01
	int m_x01 = m_x;
	int m_y01 = m_y - 1;
	//身02
	int m_x02 = m_x;
	int m_y02 = m_y - 2;
	//当前长度值
	int m_Long = 3;
	//限制最大长度初始值
	int m_maxLong = 3;
	//蛇的temp坐标
	int m_longArr[Row*List][2];
	//蛇尾Bug判定
	bool TailExcept = false;
	//死亡判定
	bool m_Trial = true;
	//所在二维数组坐标的值
	int m_snake = 1;
	//蛇的图形
	string m_Snake = "■";
};

class Food
{
public:
	int x()//行
	{
		srand((unsigned int)time(NULL));
		int temp = rand() % (Row - 2) + 1;
		return temp;
	}
	int y()//列
	{
		srand((unsigned int)time(NULL));
		int temp = rand() % (List - 2) + 1;
		return temp;
	}
	//所在二维数组坐标的值
	int m_food = 3;
	//食物的图形
	string m_Food = "◆";

};

class Null
{
public:
	//所在二维数组坐标的值
	int m_null = 0;
	//空的图形
	string m_Null = "  ";

};

class Score
{
public:
	int m_score = 0;
};

class Public
{
public:
	//界面初始化
	Public(Wall&wall, Snake&snake, Food&food, Null&null, Score&score)
	{
		for (int i = 0; i < Row; i++)
		{
			for (int j = 0; j < List; j++)
			{
				if (i == 0 || j == 0 || i == Row - 1 || j == List - 1)
				{
					this->m_Array[i][j] = wall.m_wall;
					cout << wall.m_Wall;
				}
				else if (i == snake.m_x&&j == snake.m_y)
				{
					this->m_Array[i][j] = snake.m_snake;
					cout << snake.m_Snake;
				}
				else if (i == snake.m_x01&&j == snake.m_y01)
				{
					this->m_Array[i][j] = snake.m_snake;
					cout << snake.m_Snake;
				}
				else if (i == snake.m_x02&&j == snake.m_y02)
				{
					this->m_Array[i][j] = snake.m_snake;
					cout << snake.m_Snake;
				}
				else if (i == food.x() && j == food.y())
				{
					this->m_Array[i][j] = food.m_food;
					cout << food.m_Food;
				}
				else
				{
					this->m_Array[i][j] = null.m_null;
					cout << null.m_Null;
				}
			}
			if (i == 3) { cout << "  An Ordinary Snake Game"; }
			else if (i == 7)  { cout << "   Up:             W"; }
			else if (i == 8)  { cout << "   Down:           S"; }
			else if (i == 9)  { cout << "   Left:           A"; }
			else if (i == 10) { cout << "   Right:          D"; }
			else if (i == 12) { cout << "   重来:           Z"; }
			else if (i == 13) { cout << "   暂停:           X"; }
			else if (i == 14) { cout << "   退出:           C"; }
			else if (i == 23) { cout << "   得分:  " << score.m_score; }
			cout << endl;
		}
		cout << "---按方向键开始";
	}
	//移动方向数据输入
	void setArray(char&character, Snake&snake, char&TempLostTime)
	{
		bool temp = true;flag:;
		int tempX = 0; int tempY = 0;
		//临时获取下一步的坐标，判断是否为有效按键
		//也防止新生成的蛇头吃到旧的第一节蛇身
		if (character == 'w')
		{
			tempX = snake.m_x - 1;
			tempY = snake.m_y;
		}
		else if (character == 's')
		{
			tempX = snake.m_x + 1;
			tempY = snake.m_y;
		}
		else if (character == 'a')
		{
			tempX = snake.m_x;
			tempY = snake.m_y - 1;
		}
		else if (character == 'd')
		{
			tempX = snake.m_x;
			tempY = snake.m_y + 1;
		}
		else if (character == 'z')
		{
			snake.m_Trial = false;
			character = TempLostTime;
		}
		else if (character == 'x')
		{
			if (temp == true){ cout << "---按方向键继续"; temp = false; }
			while (true)
			{
				character = _getch();
				if (character == 'w' || character == 's' || character == 'a' || character == 'd' || character == 'z' || character == 'x' || character == 'c') { goto flag; }
			}
		}
		else if (character == 'c')
		{
			m_Quit = true;
			character = TempLostTime;
		}
		else
		{
			if (m_Start == true)
			{
				m_Start = false;
				while (true)
				{
					character = _getch();
					if (character == 'w' || character == 's' || character == 'a' || character == 'd' || character == 'z' || character == 'x' || character == 'c') { goto flag; }
				}
			}
			character = TempLostTime;
		}

		if (tempX == snake.m_longArr[1][0] && tempY == snake.m_longArr[1][1])
		{
			character = TempLostTime;
		}
		else {}
		if (character == 'w')//上
		{
			this->m_Array[--snake.m_x][snake.m_y] = this->m_Array[snake.m_x][snake.m_y] + snake.m_snake;
		}
		else if (character == 's')//下
		{
			this->m_Array[++snake.m_x][snake.m_y] = this->m_Array[snake.m_x][snake.m_y] + snake.m_snake;
		}
		else if (character == 'a')//左
		{
			this->m_Array[snake.m_x][--snake.m_y] = this->m_Array[snake.m_x][snake.m_y] + snake.m_snake;
		}
		else if (character == 'd')//右
		{
			this->m_Array[snake.m_x][++snake.m_y] = this->m_Array[snake.m_x][snake.m_y] + snake.m_snake;
		}
		else
		{
			return;
		}
		return;
	}
	//蛇尾Bug判定
	void HeadTail(Snake&snake)
	{
		if (snake.m_x == snake.m_longArr[snake.m_maxLong - 1][0] && snake.m_y == snake.m_longArr[snake.m_maxLong - 1][1])
		{
			snake.TailExcept = true;
		}
		else
		{
			snake.TailExcept = false;
		}
	}
	//记录蛇的temp坐标
	void tempCoordinate(Snake&snake)
	{
		int temp = snake.m_maxLong;
		for (int i = 0; i < snake.m_maxLong; i++)
		{
			snake.m_longArr[temp][0] = snake.m_longArr[temp - 1][0];
			snake.m_longArr[temp][1] = snake.m_longArr[temp - 1][1];
			temp--;
		}
		snake.m_longArr[0][0] = snake.m_x;
		snake.m_longArr[0][1] = snake.m_y;
	}
	//蛇的判定(去除尾巴)
	void tailJudje(Snake&snake)
	{
		if (snake.m_Long > snake.m_maxLong)
		{
			int x = snake.m_longArr[snake.m_maxLong][0];
			int y = snake.m_longArr[snake.m_maxLong][1];
			this->m_Array[x][y] = 0;
			if (snake.TailExcept == true)
			{
				this->m_Array[x][y] = 1;
			}
		}
		else {}
	}
	//蛇的判定(死亡)
	void GameOver(Snake&snake)
	{
		//撞到墙
		if (snake.m_x == 0 || snake.m_y == 0 || snake.m_x == Row - 1 || snake.m_y == List - 1)
		{
			cout << "Game Over" << endl;
			system("pause");
			snake.m_Trial = false;
			return;
		}
		//撞到自己
		for (int i = 0; i < snake.m_maxLong; i++)
		{
			int x = snake.m_longArr[i][0];
			int y = snake.m_longArr[i][1];
			if (m_Array[x][y] == 2)
			{
				cout << "Game Over" << endl;
				system("pause");
				snake.m_Trial = false;
				return;
			}
		}
	}
	//食物判定
	void foodJudje(Snake&snake,Score&score)
	{
		for (int i = 0; i < Row; i++)
		{
			for (int j = 0; j < List; j++)
			{
				if (m_Array[i][j] == 4)
				{
					m_Array[i][j] = 1;
					snake.m_maxLong++;
					score.m_score++;
					while (true)
					{
						srand((unsigned int)time(NULL));
						int tempX = rand() % (Row - 2) + 1;
						int tempY = rand() % (List - 2) + 1;
						if (m_Array[tempX][tempY] != 1)
						{
							m_Array[tempX][tempY] = 3; break;
						}
					}
					return;
				}
			}
		}
	}
	//界面输出
	void getEverything(Wall&wall, Snake&snake, Food&food, Null&null, Score&score)
	{
		for (int i = 0; i < Row; i++)
		{
			for (int j = 0; j < List; j++)
			{
				switch (m_Array[i][j])
				{
				case-1:cout << wall.m_Wall; break;
				case 0:cout << null.m_Null; break;
				case 1:cout << snake.m_Snake; break;
				case 3:cout << food.m_Food; break;
				default:cout << null.m_Null; break;
				}
			}
			if (i == 3) { cout << "  An Ordinary Snake Game"; }
			else if (i == 7)  { cout << "   Up:             W"; }
			else if (i == 8)  { cout << "   Down:           S"; }
			else if (i == 9)  { cout << "   Left:           A"; }
			else if (i == 10) { cout << "   Right:          D"; }
			else if (i == 12) { cout << "   重来:           Z"; }
			else if (i == 13) { cout << "   暂停:           X"; }
			else if (i == 14) { cout << "   退出:           C"; }
			else if (i == 23) { cout << "   得分:  " << score.m_score; }
			cout << endl;
		}
		return;
	}
	int m_Array[Row][List];//行 列
	bool m_Quit = false;//退出判定
	bool m_Start = true;//开始时限制按键

};
int main()
{
	system("color 0A");//颜色改变
Flag:system("cls");
	Wall wall;   //墙的初始化
	Snake snake; //蛇的初始化
	Food food;   //食物的初始化
	Null null;   //空的初始化
	Score score;//分数初始化
	Public publicArr(wall, snake, food, null, score);//界面初始化
	char TempLostTime = 'd';//默认向右
	while (true)
	{
		char character = _getch();
		do {
			publicArr.setArray(character, snake, TempLostTime);//移动方向数据输入
			switch (publicArr.m_Quit) { case true:goto Quit; }//退出判定
			switch (snake.m_Trial) { case false:goto Flag; }//转到初始化
			snake.m_Long++;//蛇身长加一
			publicArr.foodJudje(snake, score);//食物判定
			publicArr.HeadTail(snake);//蛇尾Bug判定
			publicArr.tempCoordinate(snake);//记录蛇的temp坐标
			publicArr.tailJudje(snake);//蛇的判定(去除尾巴)
			system("cls");//清屏
			publicArr.GameOver(snake);//死亡判定
			switch (snake.m_Trial) { case false:goto Flag; break; }//转到初始化
			publicArr.getEverything(wall, snake, food, null,score);//界面输出
			TempLostTime = character;//记录上一次的输入值，解决无效输入问题
		} while (!_kbhit());
	}
Quit:;
	return 0;
}